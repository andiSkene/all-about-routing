{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andis\\\\Desktop\\\\ReactClass\\\\adv-starting-project\\\\frontend\\\\src\\\\pages\\\\EventDetail.js\",\n  _s = $RefreshSig$();\nimport { useParams } from \"react-router-dom\";\nimport EventItem from '../components/EventItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventDetailPage() {\n  _s();\n  const params = useParams();\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"event detail\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this)\n  //<EventItem event={} />\n  ;\n}\n_s(EventDetailPage, \"+jVsTcECDRo3yq2d7EQxlN9Ixog=\", false, function () {\n  return [useParams];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventID;\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: 'Could not fetch events'\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\n;\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useParams","EventItem","jsxDEV","_jsxDEV","EventDetailPage","_s","params","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","request","id","eventID","response","fetch","ok","Response","JSON","stringify","message","status","$RefreshReg$"],"sources":["C:/Users/andis/Desktop/ReactClass/adv-starting-project/frontend/src/pages/EventDetail.js"],"sourcesContent":["import { useParams } from \"react-router-dom\";\r\nimport EventItem from '../components/EventItem';\r\n\r\nfunction EventDetailPage() {\r\n    const params = useParams();\r\n\r\n    return (\r\n        <h1>event detail</h1>\r\n        //<EventItem event={} />\r\n    )\r\n\r\n}\r\n\r\nexport default EventDetailPage;\r\n\r\nexport async function loader({request, params}) {\r\n    const id = params.eventID;\r\n    const response = await fetch('http://localhost:8080/events/' + id);\r\n\r\n    if (!response.ok) {\r\n        throw new Response(JSON.stringify({ message: 'Could not fetch events'}), { status: 500 });\r\n    } else {\r\n        return response;\r\n    }\r\n};"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAMC,MAAM,GAAGN,SAAS,CAAC,CAAC;EAE1B,oBACIG,OAAA;IAAAI,QAAA,EAAI;EAAY;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI;EACpB;EAAA;AAGR;AAACN,EAAA,CARQD,eAAe;EAAA,QACLJ,SAAS;AAAA;AAAAY,EAAA,GADnBR,eAAe;AAUxB,eAAeA,eAAe;AAE9B,OAAO,eAAeS,MAAMA,CAAC;EAACC,OAAO;EAAER;AAAM,CAAC,EAAE;EAC5C,MAAMS,EAAE,GAAGT,MAAM,CAACU,OAAO;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGH,EAAE,CAAC;EAElE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAwB,CAAC,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAC7F,CAAC,MAAM;IACH,OAAOP,QAAQ;EACnB;AACJ;AAAC;AAAC,IAAAL,EAAA;AAAAa,YAAA,CAAAb,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}