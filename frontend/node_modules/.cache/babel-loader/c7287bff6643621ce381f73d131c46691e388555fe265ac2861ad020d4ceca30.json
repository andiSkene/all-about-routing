{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andis\\\\Desktop\\\\ReactClass\\\\adv-starting-project\\\\frontend\\\\src\\\\pages\\\\EventDetail.js\",\n  _s = $RefreshSig$();\nimport { useRouteLoaderData, redirect } from 'react-router-dom';\nimport EventItem from '../components/EventItem';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventDetailPage() {\n  _s();\n  const data = useRouteLoaderData('event');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EventsList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(EventDetailPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw new Response(\"Could not fetch events\", {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventID;\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: 'Could not fetch details for selected event.'\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\n;\nexport async function action({\n  request,\n  params\n}) {\n  const eventID = params.eventID;\n  const response = await fetch('http://localhost:8080/events/' + eventID, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: 'Could not remove selected event'\n    }), {\n      status: 500\n    });\n  }\n  return redirect('/events');\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useRouteLoaderData","redirect","EventItem","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","data","children","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","Response","status","resData","json","events","loader","request","params","id","eventID","JSON","stringify","message","action","method","$RefreshReg$"],"sources":["C:/Users/andis/Desktop/ReactClass/adv-starting-project/frontend/src/pages/EventDetail.js"],"sourcesContent":["import { useRouteLoaderData, redirect } from 'react-router-dom';\r\nimport EventItem from '../components/EventItem';\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventDetailPage() {\r\n    const data = useRouteLoaderData('event');\r\n\r\n    return (\r\n        <>\r\n            <EventItem event={data.event} />\r\n            <EventsList />\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default EventDetailPage;\r\n\r\nasync function loadEvents() {\r\n    const response = await fetch('http://localhost:8080/events');\r\n\r\n    if (!response.ok) {\r\n        throw new Response(\"Could not fetch events\", { status: 500 });\r\n    } else {\r\n        const resData = await response.json();\r\n        return resData.events;\r\n    }\r\n}\r\n\r\nexport async function loader({ request, params }) {\r\n    const id = params.eventID;\r\n    const response = await fetch('http://localhost:8080/events/' + id);\r\n\r\n    if (!response.ok) {\r\n        throw new Response(JSON.stringify({ message: 'Could not fetch details for selected event.' }), { status: 500 });\r\n    } else {\r\n        return response;\r\n    }\r\n};\r\n\r\nexport async function action({ request, params }) {\r\n    const eventID = params.eventID;\r\n    const response = await fetch('http://localhost:8080/events/' + eventID, { method: request.method });\r\n\r\n    if (!response.ok) {\r\n        throw new Response(JSON.stringify({ message: 'Could not remove selected event' }), { status: 500 })\r\n    }\r\n\r\n    return redirect('/events');\r\n}"],"mappings":";;AAAA,SAASA,kBAAkB,EAAEC,QAAQ,QAAQ,kBAAkB;AAC/D,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAMC,IAAI,GAAGV,kBAAkB,CAAC,OAAO,CAAC;EAExC,oBACIK,OAAA,CAAAE,SAAA;IAAAI,QAAA,gBACIN,OAAA,CAACH,SAAS;MAACU,KAAK,EAAEF,IAAI,CAACE;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChCX,OAAA,CAACF,UAAU;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAChB,CAAC;AAGX;AAACP,EAAA,CAVQD,eAAe;EAAA,QACPR,kBAAkB;AAAA;AAAAiB,EAAA,GAD1BT,eAAe;AAYxB,eAAeA,eAAe;AAE9B,eAAeU,UAAUA,CAAA,EAAG;EACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,QAAQ,CAAC,wBAAwB,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACjE,CAAC,MAAM;IACH,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACrC,OAAOD,OAAO,CAACE,MAAM;EACzB;AACJ;AAEA,OAAO,eAAeC,MAAMA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAC9C,MAAMC,EAAE,GAAGD,MAAM,CAACE,OAAO;EACzB,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGU,EAAE,CAAC;EAElE,IAAI,CAACX,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,QAAQ,CAACU,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAA8C,CAAC,CAAC,EAAE;MAAEX,MAAM,EAAE;IAAI,CAAC,CAAC;EACnH,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AACJ;AAAC;AAED,OAAO,eAAegB,MAAMA,CAAC;EAAEP,OAAO;EAAEC;AAAO,CAAC,EAAE;EAC9C,MAAME,OAAO,GAAGF,MAAM,CAACE,OAAO;EAC9B,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGW,OAAO,EAAE;IAAEK,MAAM,EAAER,OAAO,CAACQ;EAAO,CAAC,CAAC;EAEnG,IAAI,CAACjB,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,QAAQ,CAACU,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAkC,CAAC,CAAC,EAAE;MAAEX,MAAM,EAAE;IAAI,CAAC,CAAC;EACvG;EAEA,OAAOtB,QAAQ,CAAC,SAAS,CAAC;AAC9B;AAAC,IAAAgB,EAAA;AAAAoB,YAAA,CAAApB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}