{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andis\\\\Desktop\\\\ReactClass\\\\adv-starting-project\\\\frontend\\\\src\\\\pages\\\\EditEvent.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from 'react-router-dom';\nimport EventForm from '../components/EventForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditEventPage() {\n  _s();\n  const data = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(EventForm, {\n    event: data.event\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 12\n  }, this);\n}\n_s(EditEventPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EditEventPage;\nexport default EditEventPage;\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventID;\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: 'Unable to fetch selected event'\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\n;\nvar _c;\n$RefreshReg$(_c, \"EditEventPage\");","map":{"version":3,"names":["useLoaderData","EventForm","jsxDEV","_jsxDEV","EditEventPage","_s","data","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","request","params","id","eventID","response","fetch","ok","Response","JSON","stringify","message","status","$RefreshReg$"],"sources":["C:/Users/andis/Desktop/ReactClass/adv-starting-project/frontend/src/pages/EditEvent.js"],"sourcesContent":["import { useLoaderData } from 'react-router-dom';\r\nimport EventForm from '../components/EventForm';\r\n\r\nfunction EditEventPage() {\r\n    const data = useLoaderData();\r\n\r\n    return <EventForm event={data.event} />\r\n}\r\n\r\nexport default EditEventPage;\r\n\r\nexport async function loader({request, params}) {\r\n    const id = params.eventID;\r\n    const response = await fetch('http://localhost:8080/events/' + id);\r\n\r\n    if (!response.ok) {\r\n        throw new Response(JSON.stringify({ message: 'Unable to fetch selected event' }), { status: 500 })\r\n    } else {\r\n        return response;\r\n    }\r\n};"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAMC,IAAI,GAAGN,aAAa,CAAC,CAAC;EAE5B,oBAAOG,OAAA,CAACF,SAAS;IAACM,KAAK,EAAED,IAAI,CAACC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3C;AAACN,EAAA,CAJQD,aAAa;EAAA,QACLJ,aAAa;AAAA;AAAAY,EAAA,GADrBR,aAAa;AAMtB,eAAeA,aAAa;AAE5B,OAAO,eAAeS,MAAMA,CAAC;EAACC,OAAO;EAAEC;AAAM,CAAC,EAAE;EAC5C,MAAMC,EAAE,GAAGD,MAAM,CAACE,OAAO;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGH,EAAE,CAAC;EAElE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAiC,CAAC,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACtG,CAAC,MAAM;IACH,OAAOP,QAAQ;EACnB;AACJ;AAAC;AAAC,IAAAN,EAAA;AAAAc,YAAA,CAAAd,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}