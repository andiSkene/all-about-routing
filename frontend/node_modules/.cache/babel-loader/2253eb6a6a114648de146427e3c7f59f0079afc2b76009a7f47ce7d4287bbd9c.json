{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andis\\\\Desktop\\\\ReactClass\\\\adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n\n  /*     if(data.isError) {\r\n          return <p>{data.message}</p>\r\n      }\r\n   */\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //return { isError: true, message:'Could not fetch events.'};\n    //throw new Response(JSON.stringify({ message: 'Could not fetch events'}), { status: 500 });\n    return json({\n      message: 'Could not fetch events'\n    }, {\n      status: 500\n    });\n  } else {\n    //const resData = await response.json();\n    //return resData.events;\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","message","status","$RefreshReg$"],"sources":["C:/Users/andis/Desktop/ReactClass/adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json } from 'react-router-dom';\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n    const data = useLoaderData();\r\n\r\n    /*     if(data.isError) {\r\n            return <p>{data.message}</p>\r\n        }\r\n     */\r\n    const events = data.events;\r\n\r\n    return (\r\n        <>\r\n            <EventsList events={events} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nexport async function loader() {\r\n    const response = await fetch('http://localhost:8080/events');\r\n\r\n    if (!response.ok) {\r\n        //return { isError: true, message:'Could not fetch events.'};\r\n        //throw new Response(JSON.stringify({ message: 'Could not fetch events'}), { status: 500 });\r\n        return json({\r\n            message: 'Could not fetch events'\r\n        }, {\r\n            status: 500\r\n        });\r\n    } else {\r\n        //const resData = await response.json();\r\n        //return resData.events;\r\n        return response;\r\n    }\r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,QAAQ,kBAAkB;AACtD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,IAAI,GAAGT,aAAa,CAAC,CAAC;;EAE5B;AACJ;AACA;AACA;EACI,MAAMU,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,oBACIN,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACIP,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAChC,CAAC;AAEX;AAACP,EAAA,CAdQD,UAAU;EAAA,QACFP,aAAa;AAAA;AAAAgB,EAAA,GADrBT,UAAU;AAgBnB,eAAeA,UAAU;AAEzB,OAAO,eAAeU,MAAMA,CAAA,EAAG;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA;IACA,OAAOnB,IAAI,CAAC;MACRoB,OAAO,EAAE;IACb,CAAC,EAAE;MACCC,MAAM,EAAE;IACZ,CAAC,CAAC;EACN,CAAC,MAAM;IACH;IACA;IACA,OAAOJ,QAAQ;EACnB;AACJ;AAAC,IAAAF,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}